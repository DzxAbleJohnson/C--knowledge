http://blog.csdn.net/longshengguoji/article/details/8507394

vector的初始化：


列表初始化vector对象：	
vector<string> articles = {"a", "an", "the"};			//articles:冠词		正确
vector<string> articles = ("a", "an", "the");			//错误

创建指定数量的元素：
vector<string> articles = (10, "a");				//创建10个"a"，注意是()运算符


列表的初始值还是元素数量：（注意是花括号还是括号而已）
vector<string> v1{10};		//v1有1个元素，该元素是10
vector<string> v2(10);		//v2有10个元素，这些元素的值是0

vector<string> v3(10, 20);	//v3有10个元素，这些元素的值都是20
vector<string> v4{10, 20};	//v4有两个元素，10和20


向vector对象中添加元素:
push_back();
vector是用数组实现的，每次执行push_back操作，相当于底层的数组实现要重新分配大小（即先free掉原存储，后重新malloc）；这种实现体现
到vector实现就是每当push_back一个元素,都要重新分配一个大一个元素的存储，然后将原来的元素拷贝到新的存储，之后在拷贝push_back的元
素，最后要析构原有的vector并释放原有的内存。



resize()：resize()的作用是改变vector中元素的数目。
如果n比当前的vector元素数目要小，vector的容量要缩减到resize的第一个参数大小，既n。并移除那些超出n的元素同时销毁他们。
如果n比当前vector元素数目要大，在vector的末尾扩展需要的元素数目，如果第二个参数val指定了，扩展的新元素初始化为val的副本，否则按类型
默认初始化。
注意：如果n大于当前的vector的容量(是容量，并非vector的size)，将会引起自动内存分配。所以现有的pointer,references,iterators
将会失效。


reserve():
https://zhidao.baidu.com/question/403046727.html




二维数组的赋值：
int size=0;
vector<uint> array{0x00, 0x0f, 0x64, 0xb8, 0xBB, 0xD6, 0xDD, 0x1ff};
vector<vector<uint>> untouch_index;
for(int i=0; i<array.size(); i++)
{
	DEBUG << array[i];
}
untouch_index.resize(4);			//这里如果使用reserve()不会分配空间
for(int i=0; i<4; i++)
{
	for(int j=0; j<2; j++)
	{
		untouch_index[i].push_back(array[size]);
		size++;
	}
}

//打印参数
//    for(int i=0; i<4; i++)
//    {
//        for(int j=0; j<2; j++)
//        {
//            qDebug("%02X",untouch_index[i][j]);
//        }
//        qDebug("\n");
//    }






